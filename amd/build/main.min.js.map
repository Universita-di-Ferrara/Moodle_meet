{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module main\n *\n * @module     mod_gmeet/main\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalForm from 'core_form/modalform';\nimport {get_string as getString} from 'core/str';\nimport {getRecording, updateRecording} from './ajax_call';\nimport {add as addToast} from 'core/toast';\n\nconst Selectors = {\n    actions: {\n        syncRecordings: '[data-action=\"mod_gmeet/sync_recordings\"]',\n        editRecording:  '[data-role=editfield][data-id]',\n    },\n};\n\nconst asyncGetRecording = async(id) => {\n    const recording = await getRecording(id);\n    return recording;\n};\n\nconst asyncUpdateRecording = async(recording) => {\n    const response = await updateRecording(recording);\n    return response;\n};\n\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const editingRecordingelement = e.target.closest(Selectors.actions.editRecording);\n        const syncRecordingelement = e.target.closest(Selectors.actions.syncRecordings);\n        if (editingRecordingelement) {\n            e.preventDefault();\n            const recordingid = editingRecordingelement.getAttribute('data-id');\n            asyncGetRecording(recordingid).then((values) => {\n                const modalForm = new ModalForm({\n                    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n                    formClass: \"mod_gmeet\\\\recording_form\",\n                    // Add as many arguments as you need, they will be passed to the form:\n                    args: { id: recordingid, recordingname:values.name, recordingdescription:values.description},\n                    // Pass any configuration settings to the modal dialogue, for example, the title:\n                    modalConfig: {\n                        title: getString('editingfield', 'mod_gmeet', editingRecordingelement.getAttribute('data-name'))\n                    },\n                    // DOM element that should get the focus after the modal dialogue is closed:\n                    returnFocus: editingRecordingelement,\n                });\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n                    const formdata = e.detail;\n                    addToast(getString('edittoast', 'mod_gmeet'));\n                    asyncUpdateRecording(formdata)\n                    .then(() => {\n                        location.reload();\n                    });\n                });\n                // Show the form.\n                modalForm.show();\n            });\n        }\n        if (syncRecordingelement) {\n                e.preventDefault();\n                addToast(getString('synctoast', 'mod_gmeet'));\n                const form = document.getElementById('syncForm');\n                form.submit();\n                syncRecordingelement.disabled = true;\n        }\n    });\n};\n\n\n\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["Selectors","syncRecordings","editRecording","registerEventListeners","document","addEventListener","e","editingRecordingelement","target","closest","syncRecordingelement","preventDefault","recordingid","getAttribute","async","id","asyncGetRecording","then","values","modalForm","ModalForm","formClass","args","recordingname","name","recordingdescription","description","modalConfig","title","returnFocus","events","FORM_SUBMITTED","formdata","detail","recording","asyncUpdateRecording","location","reload","show","getElementById","submit","disabled"],"mappings":";;;;;;;sJA2BMA,kBACO,CACLC,eAAgB,4CAChBC,cAAgB,kCAclBC,uBAAyB,KAC3BC,SAASC,iBAAiB,SAASC,UACzBC,wBAA0BD,EAAEE,OAAOC,QAAQT,kBAAkBE,eAC7DQ,qBAAuBJ,EAAEE,OAAOC,QAAQT,kBAAkBC,mBAC5DM,wBAAyB,CACzBD,EAAEK,uBACIC,YAAcL,wBAAwBM,aAAa,WAhB3CC,OAAAA,UACE,2BAAaC,IAgB7BC,CAAkBJ,aAAaK,MAAMC,eAC3BC,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,4BAEXC,KAAM,CAAEP,GAAIH,YAAaW,cAAcL,OAAOM,KAAMC,qBAAqBP,OAAOQ,aAEhFC,YAAa,CACTC,OAAO,mBAAU,eAAgB,YAAarB,wBAAwBM,aAAa,eAGvFgB,YAAatB,0BAEjBY,UAAUd,iBAAiBc,UAAUW,OAAOC,gBAAiBzB,UACnD0B,SAAW1B,EAAE2B,uBACV,mBAAU,YAAa,cA3BvBnB,OAAAA,iBACF,8BAAgBoB,WA2BvBC,CAAqBH,UACpBf,MAAK,KACFmB,SAASC,eAIjBlB,UAAUmB,aAGd5B,qBAAsB,CAClBJ,EAAEK,iCACO,mBAAU,YAAa,cACnBP,SAASmC,eAAe,YAChCC,SACL9B,qBAAqB+B,UAAW,qBAO5B,KAChBtC"}