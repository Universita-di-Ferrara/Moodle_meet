{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module main\n *\n * @module     mod_gmeet/main\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalForm from 'core_form/modalform';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport { get_string as getString } from 'core/str';\nimport { getRecording, updateRecording, deleteRecording, addRecording } from './ajax_call';\nimport { add as addToast } from 'core/toast';\nimport { addNotification } from 'core/notification';\n\nconst Selectors = {\n    actions: {\n        syncRecordings: '[data-action=\"mod_gmeet/sync_recordings\"]',\n        editRecording: '[data-role=editfield][data-id]',\n        deleteRecording: '[data-role=deletefield][data-id]',\n        addRecording: '[data-action=\"mod_gmeet/add_recording\"]'\n    },\n};\n\nconst asyncGetRecording = async (id, courseid) => {\n    const recording = await getRecording(id, courseid);\n    return recording;\n};\n\nconst asyncUpdateRecording = async (recording) => {\n    const response = await updateRecording(recording);\n    if (response.responsecode) {\n        window.location.reload(true);\n    }\n};\n\nconst asyncAddRecording = async (recording) => {\n    const response = await addRecording(recording);\n    if (response.recordingid) {\n        window.location.reload(true);\n    }\n};\n\nconst asyncDeleteRecording = async (id, courseid) => {\n    const response = await deleteRecording(id, courseid);\n    if (response.responsecode) {\n        window.location.reload(true);\n    }\n};\n\n\nconst registerEventListeners = (deletemodal) => {\n    document.addEventListener('click', e => {\n        const editingRecordingelement = e.target.closest(Selectors.actions.editRecording);\n        const syncRecordingelement = e.target.closest(Selectors.actions.syncRecordings);\n        const deleteRecordingelement = e.target.closest(Selectors.actions.deleteRecording);\n        const addRecordingelement = e.target.closest(Selectors.actions.addRecording);\n        if (editingRecordingelement) {\n            e.preventDefault();\n            const recordingid = editingRecordingelement.getAttribute('data-id');\n            const courseid = editingRecordingelement.getAttribute('course-id');\n            asyncGetRecording(recordingid, courseid).then((values) => {\n                const modalForm = new ModalForm({\n                    // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n                    formClass: \"mod_gmeet\\\\recording_form\",\n                    // Add as many arguments as you need, they will be passed to the form:\n                    args: {\n                        id: recordingid,\n                        recordingname: values.name,\n                        recordingdescription: values.description,\n                        courseid: courseid,\n                    },\n                    // Pass any configuration settings to the modal dialogue, for example, the title:\n                    modalConfig: {\n                        title: getString('editingfield', 'mod_gmeet', editingRecordingelement.getAttribute('data-name'))\n                    },\n                    // DOM element that should get the focus after the modal dialogue is closed:\n                    returnFocus: editingRecordingelement,\n                });\n                modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n                    const formdata = e.detail;\n                    addToast(getString('edittoast', 'mod_gmeet'));\n                    asyncUpdateRecording(formdata);\n                });\n                // Show the form.\n                modalForm.show();\n            });\n        }\n        if (syncRecordingelement) {\n            e.preventDefault();\n            addToast(getString('synctoast', 'mod_gmeet'));\n            const form = document.getElementById('syncForm');\n            form.submit();\n            syncRecordingelement.disabled = true;\n        }\n        if (deleteRecordingelement) {\n            const recordingid = deleteRecordingelement.getAttribute('data-id');\n            const courseid = deleteRecordingelement.getAttribute('course-id');\n            e.preventDefault();\n            deletemodal.show();\n            deletemodal.getRoot().on(ModalEvents.save, () => {\n                addToast(getString('deletetoast', 'mod_gmeet'), {\n                    type: 'danger',\n                });\n                asyncDeleteRecording(recordingid, courseid);\n            });\n        }\n        if (addRecordingelement) {\n            e.preventDefault();\n            const courseid = addRecordingelement.getAttribute('course-id');\n            const instanceid = addRecordingelement.getAttribute('instance-id');\n            const modalForm = new ModalForm({\n                // Name of the class where form is defined (must extend \\core_form\\dynamic_form):\n                formClass: \"mod_gmeet\\\\new_recording_form\",\n                // Add as many arguments as you need, they will be passed to the form:\n                args: {\n                    courseid: courseid,\n                    instanceid: instanceid\n                },\n                // Pass any configuration settings to the modal dialogue, for example, the title:\n                modalConfig: {\n                    title: getString('addrecording_modal', 'mod_gmeet'),\n                    buttons: {\n                        'save': getString('addrecording_formbutton', 'mod_gmeet'),\n                    }\n                },\n            });\n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (e) => {\n                const formdata = e.detail;\n                if (!formdata.status) {\n                    addNotification({\n                        message: formdata.message,\n                        type: 'error',\n                    });\n                } else {\n                    addToast(getString('addrecording_toast', 'mod_gmeet'));\n                    asyncAddRecording(formdata);\n                }\n            });\n            // Show the form.\n            modalForm.show();\n        }\n    });\n};\n\nexport const init = async () => {\n    const deleteform = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: getString('delete_form_title', 'mod_gmeet'),\n        body: getString('delete_form_body', 'mod_gmeet'),\n        buttons: {\n            'save': getString('delete_form_button', 'mod_gmeet'),\n        }\n    });\n    registerEventListeners(deleteform);\n};\n"],"names":["Selectors","syncRecordings","editRecording","deleteRecording","addRecording","registerEventListeners","deletemodal","document","addEventListener","e","editingRecordingelement","target","closest","syncRecordingelement","deleteRecordingelement","addRecordingelement","preventDefault","recordingid","getAttribute","courseid","async","id","asyncGetRecording","then","values","modalForm","ModalForm","formClass","args","recordingname","name","recordingdescription","description","modalConfig","title","returnFocus","events","FORM_SUBMITTED","formdata","detail","recording","responsecode","window","location","reload","asyncUpdateRecording","show","getElementById","submit","disabled","getRoot","on","ModalEvents","save","type","asyncDeleteRecording","instanceid","buttons","status","asyncAddRecording","message","deleteform","ModalFactory","create","types","SAVE_CANCEL","body"],"mappings":";;;;;;;gPA8BMA,kBACO,CACLC,eAAgB,4CAChBC,cAAe,iCACfC,gBAAiB,mCACjBC,aAAc,2CA+BhBC,uBAA0BC,cAC5BC,SAASC,iBAAiB,SAASC,UACzBC,wBAA0BD,EAAEE,OAAOC,QAAQZ,kBAAkBE,eAC7DW,qBAAuBJ,EAAEE,OAAOC,QAAQZ,kBAAkBC,gBAC1Da,uBAAyBL,EAAEE,OAAOC,QAAQZ,kBAAkBG,iBAC5DY,oBAAsBN,EAAEE,OAAOC,QAAQZ,kBAAkBI,iBAC3DM,wBAAyB,CACzBD,EAAEO,uBACIC,YAAcP,wBAAwBQ,aAAa,WACnDC,SAAWT,wBAAwBQ,aAAa,aApCxCE,OAAOC,GAAIF,iBACT,2BAAaE,GAAIF,UAoCjCG,CAAkBL,YAAaE,UAAUI,MAAMC,eACrCC,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,4BAEXC,KAAM,CACFP,GAAIJ,YACJY,cAAeL,OAAOM,KACtBC,qBAAsBP,OAAOQ,YAC7Bb,SAAUA,UAGdc,YAAa,CACTC,OAAO,mBAAU,eAAgB,YAAaxB,wBAAwBQ,aAAa,eAGvFiB,YAAazB,0BAEjBe,UAAUjB,iBAAiBiB,UAAUW,OAAOC,gBAAiB5B,UACnD6B,SAAW7B,EAAE8B,uBACV,mBAAU,YAAa,cApDvBnB,OAAAA,mBACF,8BAAgBoB,YAC1BC,cACTC,OAAOC,SAASC,QAAO,IAkDXC,CAAqBP,aAGzBb,UAAUqB,aAGdjC,qBAAsB,CACtBJ,EAAEO,iCACO,mBAAU,YAAa,cACnBT,SAASwC,eAAe,YAChCC,SACLnC,qBAAqBoC,UAAW,KAEhCnC,uBAAwB,OAClBG,YAAcH,uBAAuBI,aAAa,WAClDC,SAAWL,uBAAuBI,aAAa,aACrDT,EAAEO,iBACFV,YAAYwC,OACZxC,YAAY4C,UAAUC,GAAGC,sBAAYC,MAAM,qBAC9B,mBAAU,cAAe,aAAc,CAC5CC,KAAM,WA3DGlC,OAAOC,GAAIF,mBACb,8BAAgBE,GAAIF,WAC9BsB,cACTC,OAAOC,SAASC,QAAO,IA0DfW,CAAqBtC,YAAaE,gBAGtCJ,oBAAqB,CACrBN,EAAEO,uBACIG,SAAWJ,oBAAoBG,aAAa,aAC5CsC,WAAazC,oBAAoBG,aAAa,eAC9CO,UAAY,IAAIC,mBAAU,CAE5BC,UAAW,gCAEXC,KAAM,CACFT,SAAUA,SACVqC,WAAYA,YAGhBvB,YAAa,CACTC,OAAO,mBAAU,qBAAsB,aACvCuB,QAAS,OACG,mBAAU,0BAA2B,iBAIzDhC,UAAUjB,iBAAiBiB,UAAUW,OAAOC,gBAAiB5B,UACnD6B,SAAW7B,EAAE8B,OACdD,SAASoB,wBAMD,mBAAU,qBAAsB,cAnGnCtC,OAAAA,mBACC,2BAAaoB,YACvBvB,aACTyB,OAAOC,SAASC,QAAO,IAiGXe,CAAkBrB,6CANF,CACZsB,QAAStB,SAASsB,QAClBN,KAAM,aAQlB7B,UAAUqB,0BAKF1B,gBACVyC,iBAAmBC,uBAAaC,OAAO,CACzCT,KAAMQ,uBAAaE,MAAMC,YACzB/B,OAAO,mBAAU,oBAAqB,aACtCgC,MAAM,mBAAU,mBAAoB,aACpCT,QAAS,OACG,mBAAU,qBAAsB,gBAGhDpD,uBAAuBwD"}