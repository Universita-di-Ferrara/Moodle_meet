{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module main\n *\n * @module     mod_gmeet/main\n * @copyright  2024 YOUR NAME <your@email.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { exception as displayException } from 'core/notification';\nimport Templates from 'core/templates';\n\n/* \nconst context = {\n    'synced_recordings': ['www.pippotest.com',\"www.plutotest.it\"]\n}; */\n\nconst Selectors = {\n    actions: {\n        syncRecordings: '[data-action=\"mod_gmeet/sync_recordings\"]',\n    },\n};\n\n\n\nconst registerEventListeners = (meeting_code) => {\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.syncRecordings)) {\n            console.log(__dirname);\n            //ajax call for retrieving last recordings after last sync\n            $.ajax({\n                type: \"post\",\n                url: \"\",\n                data: {'meeting_code':meeting_code},\n                dataType: \"json\",\n                success: function (response) {\n                    \n                }\n            });\n            // This will call the function to load and render our template.\n            Templates.renderForPromise('mod_gmeet/row_recordings_table', context)\n\n                // It returns a promise that needs to be resoved.\n                .then(({ html, js }) => {\n                    // Here eventually I have my compiled template, and any javascript that it generated.\n                    // The templates object has append, prepend and replace functions.\n                    Templates.appendNodeContents('.recordings_tbody', html, js);\n                })\n\n                // Deal with this exception (Using core/notify exception function is recommended).\n                .catch((error) => displayException(error));\n\n\n        }\n    });\n};\n\nexport const init = (meeting_code) => {\n    registerEventListeners(meeting_code);\n};"],"names":["Selectors","syncRecordings","meeting_code","document","addEventListener","e","target","closest","console","log","__dirname","$","ajax","type","url","data","dataType","success","response","renderForPromise","context","then","_ref","html","js","appendNodeContents","catch","error","registerEventListeners"],"mappings":";;;;;;;sJA+BMA,kBACO,CACLC,eAAgB,2DAsCHC,eAhCWA,CAAAA,eAC5BC,SAASC,iBAAiB,SAASC,IAC3BA,EAAEC,OAAOC,QAAQP,kBAAkBC,kBACnCO,QAAQC,IAAIC,WAEZC,EAAEC,KAAK,CACHC,KAAM,OACNC,IAAK,GACLC,KAAM,cAAgBb,cACtBc,SAAU,OACVC,QAAS,SAAUC,iCAKbC,iBAAiB,iCAAkCC,SAGxDC,MAAKC,WAACC,KAAEA,KAAFC,GAAQA,4BAGDC,mBAAmB,oBAAqBF,KAAMC,OAI3DE,OAAOC,QAAU,2BAAiBA,cAQ/CC,CAAuB1B"}